diff --git a/Modulares System.html b/Modulares System.html
index a07ce41d896c12aeac1c4743888a99a4a2e60228..5fc965b17324802be5f5cf53644ec5fcaa6e9f68 100644
--- a/Modulares System.html	
+++ b/Modulares System.html	
@@ -13,215 +13,248 @@
     body { margin: 0; transition: background 0.2s;}
     .grid-stack-item-content {
       background: #005983;
       border-radius: 1.75rem;
       color: white;
       padding: 1.5rem 1rem 1.5rem 1rem;
       display: flex;
       flex-direction: column;
       min-height: 350px;
     }
     #sidebar { min-width: 220px; max-width: 340px; transition: all 0.2s; }
     #template-list .dragging { opacity: 0.4; }
     .attachment-list { font-size: 0.92em; color: #2563eb; margin-top: 2px; }
     .config-sidebar {
       position: fixed;
       top: 0; right: 0; z-index: 50;
       width: 420px; max-width: 100vw;
       height: 100vh; background: #fff;
       box-shadow: -4px 0 18px #0004;
       transform: translateX(110%);
       transition: transform 0.25s;
       display: flex; flex-direction: column;
       padding: 32px 30px 18px 30px;
       gap: 1rem;
     }
-    .config-sidebar.open { transform: translateX(0); }
-    .config-backdrop {
-      display: none;
-      position:fixed; left:0; top:0; width:100vw; height:100vh; z-index:49;
-      background:rgba(0,0,0,0.18);
-    }
-    .config-backdrop.open { display:block; }
-    .config-sidebar:not(.open), .config-backdrop:not(.open) { pointer-events:none; }
-    @media (max-width: 600px) {
-      .config-sidebar { width: 100vw; min-width:0; padding:20px 5vw; }
-    }
-  </style>
-</head>
-<body class="bg-gray-100">
+    .config-sidebar.open { transform: translateX(0); }
+    .config-backdrop {
+      display: none;
+      position:fixed; left:0; top:0; width:100vw; height:100vh; z-index:49;
+      background:rgba(0,0,0,0.18);
+    }
+    .config-backdrop.open { display:block; }
+    .config-sidebar:not(.open), .config-backdrop:not(.open) { pointer-events:none; }
+    @media (max-width: 600px) {
+      .config-sidebar { width: 100vw; min-width:0; padding:20px 5vw; }
+    }
+    .lh-dark { background-color: #051c2c; }
+    .lh-dark .grid-stack-item-content {
+      background: #0a2d44;
+      color: #ffffff;
+      border: 1px solid #ffffff;
+    }
+    .lh-dark button {
+      background-color: #ffffff;
+      color: #051c2c;
+      border: 1px solid #ffffff;
+    }
+    .lh-dark button:hover {
+      background-color: transparent;
+      color: #ffffff;
+    }
+  </style>
+</head>
+<body class="bg-gray-100">
 <div class="flex">
   <!-- Sidebar -->
   <aside id="sidebar" class="w-72 min-h-screen bg-gray-50 p-4 border-r flex flex-col gap-4">
     <button id="pick-module-folder" class="bg-orange-500 hover:bg-orange-600 text-white px-4 py-2 rounded mb-2">Modul-Root-Ordner ausw√§hlen</button>
     <h2 class="font-bold text-lg mb-2">Module (Live)</h2>
     <div id="template-list" class="flex flex-col gap-2"></div>
   </aside>
   <main class="flex-1 h-screen relative">
     <header class="flex items-center bg-white p-6 shadow">
       <button id="toggle-sidebar" class="mr-4 bg-gray-200 hover:bg-gray-300 px-3 py-2 rounded" title="Sidebar ein-/ausblenden">
         <span id="sidebar-icon">üëÅÔ∏è</span>
       </button>
       <h1 class="text-2xl font-bold">üóÇÔ∏è Universal Dashboard mit Einstellungen</h1>
       <div id="current-path" class="path-display ml-6">Ausgew√§hlter Ordner: <em>nicht gesetzt</em></div>
       <button id="toggle-config" class="ml-6 bg-gray-200 hover:bg-gray-300 px-3 py-2 rounded" title="Einstellungen"><span>‚öôÔ∏è</span></button>
       <div class="ml-auto flex gap-2">
         <button id="set-main-folder" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded">Hauptordner w√§hlen</button>
         <button id="load-config" class="bg-purple-500 hover:bg-purple-600 text-white px-4 py-2 rounded">Konfiguration laden</button>
         <button id="save-config" class="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded">Konfiguration speichern</button>
       </div>
     </header>
     <input type="file" id="folder-input" webkitdirectory directory multiple hidden />
     <input type="file" id="config-input" accept="application/json" hidden />
     <div id="canvas-dropzone" class="h-full w-full">
       <div class="grid-stack p-6" style="min-height:650px"></div>
     </div>
   </main>
 </div>
 
 <!-- CONFIG SIDEBAR -->
 <div id="config-backdrop" class="config-backdrop"></div>
 <aside id="config-sidebar" class="config-sidebar">
   <h2 class="font-bold text-xl mb-2">‚öôÔ∏è Einstellungen</h2>
   <label class="font-semibold mt-2 mb-0">Modul-Root-Ordner:
     <div class="flex items-center gap-2">
       <input id="set-modules-path" type="text" readonly class="border p-1 w-full bg-gray-100" />
       <button id="set-modules-path-btn" class="bg-blue-500 hover:bg-blue-600 text-white px-2 py-1 rounded">Ausw√§hlen</button>
     </div>
   </label>
   <label class="font-semibold mt-2 mb-0">Config-Speicherort (optional):
     <input id="set-config-path" type="text" class="border p-1 w-full" placeholder="Pfad oder Dateiname" />
   </label>
-  <label class="font-semibold mt-2 mb-0">Scaling / Zoom:
-    <input id="set-scaling" type="range" min="0.5" max="2" step="0.05" value="1" />
-    <span id="scaling-value">1.0</span>
-  </label>
-  <label class="font-semibold mt-2 mb-0">Theme:
-    <select id="set-theme" class="border p-1 w-full">
-      <option value="auto">System</option>
-      <option value="light">Hell</option>
-      <option value="dark">Dunkel</option>
-    </select>
-  </label>
+  <label class="font-semibold mt-2 mb-0">Scaling / Zoom:
+    <div id="set-scaling" class="flex gap-2 mt-1">
+      <button type="button" class="zoom-btn px-2 py-1 rounded bg-gray-200" data-scale="0.5">50%</button>
+      <button type="button" class="zoom-btn px-2 py-1 rounded bg-gray-200" data-scale="0.75">75%</button>
+      <button type="button" class="zoom-btn px-2 py-1 rounded bg-gray-200" data-scale="1">100%</button>
+      <button type="button" class="zoom-btn px-2 py-1 rounded bg-gray-200" data-scale="1.25">125%</button>
+      <button type="button" class="zoom-btn px-2 py-1 rounded bg-gray-200" data-scale="1.5">150%</button>
+      <button type="button" class="zoom-btn px-2 py-1 rounded bg-gray-200" data-scale="2">200%</button>
+    </div>
+    <span id="scaling-value">100%</span>
+  </label>
+  <label class="font-semibold mt-2 mb-0">Theme:
+    <select id="set-theme" class="border p-1 w-full">
+      <option value="auto">System</option>
+      <option value="light">Hell</option>
+      <option value="dark">Dunkel</option>
+      <option value="lh-dark">Lufthansa-Dunkel</option>
+    </select>
+  </label>
   <label class="font-semibold mt-2 mb-0">Sprache:
     <select id="set-lang" class="border p-1 w-full">
       <option value="de">Deutsch</option>
       <option value="en">English</option>
     </select>
   </label>
   <div class="flex gap-2 mt-6">
     <button id="save-configs" class="bg-green-600 text-white px-4 py-2 rounded">Speichern</button>
     <button id="close-configs" class="bg-gray-500 text-white px-4 py-2 rounded">Schlie√üen</button>
     <button id="reset-configs" class="bg-red-400 text-white px-4 py-2 rounded">Reset</button>
   </div>
 </aside>
 
 <script>
   // === CONFIG SIDEBAR ===
   const configSidebar = document.getElementById('config-sidebar');
   const configBackdrop = document.getElementById('config-backdrop');
   function showConfigSidebar(show=true) {
     configSidebar.classList.toggle('open', show);
     configBackdrop.classList.toggle('open', show);
     if (show) fillConfigUI();
   }
   document.getElementById('toggle-config').onclick = () => showConfigSidebar(true);
   document.getElementById('close-configs').onclick = () => showConfigSidebar(false);
   configBackdrop.onclick = () => showConfigSidebar(false);
 
   // SETTINGS STATE
   let settings = {
     modulesPath: "",
     configPath: "",
     scaling: 1,
     theme: "auto",
     lang: "de"
   };
 
-  function fillConfigUI() {
-    document.getElementById('set-modules-path').value = settings.modulesPath || "";
-    document.getElementById('set-config-path').value = settings.configPath || "";
-    document.getElementById('set-scaling').value = settings.scaling || 1;
-    document.getElementById('scaling-value').innerText = Number(settings.scaling).toFixed(2);
-    document.getElementById('set-theme').value = settings.theme || "auto";
-    document.getElementById('set-lang').value = settings.lang || "de";
-  }
-
-  document.getElementById('set-modules-path-btn').onclick = async function() {
-    try {
-      const handle = await window.showDirectoryPicker();
-      settings.modulesPath = handle.name;
-      localStorage.setItem('modulesPath', handle.name);
-      document.getElementById('set-modules-path').value = handle.name;
-    } catch {}
-  };
-
-  document.getElementById('set-scaling').oninput = function(e) {
-    const v = e.target.value;
-    document.getElementById('scaling-value').innerText = Number(v).toFixed(2);
-    document.body.style.zoom = v;
-    settings.scaling = v;
-  };
+  function fillConfigUI() {
+    document.getElementById('set-modules-path').value = settings.modulesPath || "";
+    document.getElementById('set-config-path').value = settings.configPath || "";
+    document.getElementById('scaling-value').innerText = Math.round((settings.scaling || 1) * 100) + '%';
+    document.querySelectorAll('#set-scaling .zoom-btn').forEach(btn => {
+      const active = Number(btn.dataset.scale) === Number(settings.scaling);
+      btn.classList.toggle('font-bold', active);
+      btn.classList.toggle('bg-gray-300', active);
+    });
+    document.getElementById('set-theme').value = settings.theme || "auto";
+    document.getElementById('set-lang').value = settings.lang || "de";
+  }
 
-  document.getElementById('set-theme').onchange = function(e) {
-    const t = e.target.value;
-    settings.theme = t;
-    if (t === 'dark') document.body.classList.add('bg-gray-900');
-    else document.body.classList.remove('bg-gray-900');
-  };
+  document.getElementById('set-modules-path-btn').onclick = async function() {
+    try {
+      const handle = await window.showDirectoryPicker();
+      settings.modulesPath = handle.name;
+      localStorage.setItem('modulesPath', handle.name);
+      document.getElementById('set-modules-path').value = handle.name;
+    } catch {}
+  };
+
+  document.querySelectorAll('#set-scaling .zoom-btn').forEach(btn => {
+    btn.addEventListener('click', () => {
+      const v = parseFloat(btn.dataset.scale);
+      settings.scaling = v;
+      document.body.style.zoom = v;
+      document.getElementById('scaling-value').innerText = Math.round(v * 100) + '%';
+      document.querySelectorAll('#set-scaling .zoom-btn').forEach(b => b.classList.remove('font-bold','bg-gray-300'));
+      btn.classList.add('font-bold','bg-gray-300');
+    });
+  });
+
+  document.getElementById('set-theme').onchange = function(e) {
+    const t = e.target.value;
+    settings.theme = t;
+    document.body.classList.remove('bg-gray-900','lh-dark');
+    if (t === 'dark') document.body.classList.add('bg-gray-900');
+    if (t === 'lh-dark') document.body.classList.add('lh-dark');
+  };
 
-  document.getElementById('set-lang').onchange = function(e) {
-    settings.lang = e.target.value;
-  };
-
-  document.getElementById('save-configs').onclick = () => {
-    settings.configPath = document.getElementById('set-config-path').value;
-    settings.scaling = document.getElementById('set-scaling').value;
-    settings.theme = document.getElementById('set-theme').value;
-    settings.lang = document.getElementById('set-lang').value;
-    for (let k in settings) localStorage.setItem(k, settings[k]);
-    showConfigSidebar(false);
-    alert('Einstellungen gespeichert!');
-  };
+  document.getElementById('set-lang').onchange = function(e) {
+    settings.lang = e.target.value;
+  };
+
+  document.getElementById('save-configs').onclick = () => {
+    settings.configPath = document.getElementById('set-config-path').value;
+    settings.theme = document.getElementById('set-theme').value;
+    settings.lang = document.getElementById('set-lang').value;
+    for (let k in settings) localStorage.setItem(k, settings[k]);
+    showConfigSidebar(false);
+    alert('Einstellungen gespeichert!');
+  };
 
   document.getElementById('reset-configs').onclick = () => {
     localStorage.clear();
     settings = {modulesPath:"",configPath:"",scaling:1,theme:"auto",lang:"de"};
     fillConfigUI();
     alert('Einstellungen zur√ºckgesetzt!');
   };
 
-  function loadSettings() {
-    for (let k in settings) {
-      let v = localStorage.getItem(k);
-      if (v !== null) settings[k] = v;
-    }
-    fillConfigUI();
-    if (settings.scaling) document.body.style.zoom = settings.scaling;
-    if (settings.theme==="dark") document.body.classList.add('bg-gray-900');
-  }
-  loadSettings();
+  function loadSettings() {
+    for (let k in settings) {
+      let v = localStorage.getItem(k);
+      if (v !== null) settings[k] = v;
+    }
+    if (settings.scaling) document.body.style.zoom = settings.scaling;
+    document.body.classList.remove('bg-gray-900','lh-dark');
+    if (settings.theme === 'dark') document.body.classList.add('bg-gray-900');
+    else if (settings.theme === 'lh-dark') document.body.classList.add('lh-dark');
+    fillConfigUI();
+  }
+  loadSettings();
 
   // == FIX: Sidebar & Backdrop blockieren keine Klicks mehr wenn hidden ==
   const observer = new MutationObserver(() => {
     configSidebar.style.pointerEvents = configSidebar.classList.contains('open') ? "" : "none";
     configBackdrop.style.pointerEvents = configBackdrop.classList.contains('open') ? "" : "none";
   });
   observer.observe(configSidebar, { attributes: true, attributeFilter: ['class'] });
   observer.observe(configBackdrop, { attributes: true, attributeFilter: ['class'] });
 
   // === Universal Dashboard Features ===
   let moduleDirHandle = null;
   let sidebarRefreshInterval = null;
   let liveModuleTemplates = [];
   let grid;
   let moduleCounter = 0;
   let mainFolderHandle = { isFallback: true, name: '', files: [] };
   const pathEl = document.getElementById('current-path');
 
   // --------- Module Sidebar & Drag&Drop ---------
   document.getElementById('pick-module-folder').onclick = async function() {
     try {
       moduleDirHandle = await window.showDirectoryPicker();
       await refreshSidebarModules();
       if (sidebarRefreshInterval) clearInterval(sidebarRefreshInterval);
       sidebarRefreshInterval = setInterval(refreshSidebarModules, 2000);
